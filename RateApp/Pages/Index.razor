@page "/"
@using System.Text;
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Components;
@using Newtonsoft.Json;

@using RateApp.Models;
 
 
 
<table class="table">
    <thead>
        <tr>
           
            <th>Year</th>
             
            <th>Interest p.a</th>


            <th>Sr Interest p.a</th>
             
        </tr>
    </thead>
<tbody>
@foreach (InQuestion inques in Questions)
{
    // Pass the Dto properties to the component
     <tr>
                <td>@inques.DaysBegin</td>
                
                <td>@inques.Interest</td>

                <td>@inques.SrInterest</td>
                 
            </tr>}
</tbody>
</table>
 
 
<div class="row">
      
    <div class="col-md-3">
        <p>Deposit Amount INR</p>
    </div>
 
<input type="range" min="1000" max="50000" step="1000" @bind="@amount"
    @onchange="@UpdateCurrentInterestValue" @bind:event="oninput" />

<p>@amount</p>
</div>

<br />
<div class="row">
  <p>Years:</p>
<input type="range" min="1" max="5" step="1" @bind="@years"
    @onchange="@UpdateCurrentInterestValue" @bind:event="oninput" />
</div>

<p>@years</p>


<br />
<div class="row">
    <input type="range" min="0" max="1" step="1" @bind="@srcitizen"
    @onchange="@UpdateCurrentInterestValue" @bind:event="oninput" />
</div>


@if (srcitizen > 0)
{
      <p>Sr Citizen</p>
}


@if (srcitizen == 0)
{
    <p>Non Sr Citizen</p>
}

@if(listcount>0)
{ 
<div>
    <div class="col-md-3">
            <p>Maturity Amount INR(Rounded, Simple and not compounded)</p>
    </div>
    <div>@final</div>
        <div class="col-md-3">
            <p>Maturity Amount INR(Rounded ,Compunded Halfyearly)</p>
        </div>
        <div>@finalcompound</div>


        


</div>
}
 
@code {
    public class InQuestion
    { 
        public int No { get; set; }

        public int DaysBegin { get; set; }

        public int DaysEnd { get; set; }

        public decimal Interest { get; set; }

        public decimal SrInterest { get; set; }

    }


    public int srcitizen;
    public int listcount; public int totfinal;
    public string codex; public string  jsonstring ; public bool statcode;
    List<InQuestion> Questions = new List<InQuestion>();
    public int number; int years = 1; decimal interest; decimal srinterest; int totalquestions; int maxnumber; int amount = 1000; decimal imint; int final; int finalcompound;
    decimal imstint; int srfinal; int srfinalcompound;




    protected override async Task OnInitializedAsync()
    {



        string jwturl = "https://quizapijwt.azurewebsites.net/api/";





        using (var client1 = new HttpClient())
        {



            client1.BaseAddress = new Uri(jwturl);

            client1.DefaultRequestHeaders.Clear();
            client1.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            HttpResponseMessage response = await client1.GetAsync("RateCards");

            if (response.IsSuccessStatusCode)
            {
                //Storing the response details recieved from web api
                jsonstring = await response.Content.ReadAsStringAsync();

                try
                {
                    Questions = JsonConvert.DeserializeObject<List<InQuestion>>(jsonstring);
                    Questions =Questions.OrderBy(x => x.DaysBegin).ToList();
                    listcount = Questions.Count();
                    var imint = (from l in Questions
                                 where l.DaysBegin == years
                                 select l.Interest).FirstOrDefault();
                    decimal amt = amount;

                    decimal finint = Decimal.Multiply(amt, imint);
                    interest = Decimal.Multiply(finint, years);
                    final = (int)Math.Round((interest / 100) + amt);


                    double citotal; int t = 0;
                    double ciint; decimal cifinal = 0.0M;
                    ciint = (double)imint;
                    int annualCompound = 200;
                    cifinal = Decimal.Multiply(amt, (decimal)Math.Pow((1 + ciint / annualCompound), (2 * years)));

                    //     cifinal = Decimal.Multiply(amt, (decimal)ciint);


                    finalcompound = (int)Math.Round(cifinal);

                    var srimint = (from l in Questions
                                   where l.DaysBegin == years
                                   select l.SrInterest).FirstOrDefault();


                    //
                    decimal srfinint = Decimal.Multiply(amt, srimint);
                    srinterest = Decimal.Multiply(srfinint, years);
                    srfinal = (int)Math.Round((srinterest / 100) + amt);

                    //

                    double srciint; decimal srcifinal = 0.0M;
                    srciint = (double)srimint;
                    srcifinal = Decimal.Multiply(amt, (decimal)Math.Pow((1 + srciint / annualCompound), (2 * years)));

                    srfinalcompound = (int)Math.Round(srcifinal);

                }
                catch (Exception ex)
                {   }


            }
        }





    }







    private void UpdateCurrentInterestValue()
    {

        try
        { 

            var    imint  =  (from l in Questions
                         where l.DaysBegin == years
                         select l.Interest).FirstOrDefault() ; 

            var srimint = (from l in Questions
                           where l.DaysBegin == years
                           select l.SrInterest).FirstOrDefault();


            decimal amt = amount;

            decimal  finint= Decimal.Multiply(amt, imint)   ;   
            interest=Decimal.Multiply( finint,years);
            final = (int)Math.Round((interest / 100) + amt);


            decimal srfinint = Decimal.Multiply(amt, srimint);
            srinterest=Decimal.Multiply(srfinint, years);
            srfinal = (int)Math.Round((srinterest / 100) + amt);
            int annualCompound =  200;
            //   int t = 0;
            double ciint; decimal cifinal=0.0M;
            double srciint; decimal srcifinal = 0.0M;
            ciint =  (double)imint ;
            srciint = (double)srimint;

            cifinal = Decimal.Multiply(amt, (decimal)Math.Pow((1 + ciint / annualCompound), (2*years)));

            srcifinal = Decimal.Multiply(amt, (decimal)Math.Pow((1 + srciint / annualCompound), (2 * years)));



            finalcompound = (int)Math.Round(cifinal);
            srfinalcompound = (int)Math.Round(srcifinal);


            if (srcitizen > 0)
            {
                finalcompound = srfinalcompound;
                final = srfinal;

            }
        }
        catch (Exception ex)
        {

              
        }

    }
}


 
 